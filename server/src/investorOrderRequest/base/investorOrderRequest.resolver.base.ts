/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateInvestorOrderRequestArgs } from "./CreateInvestorOrderRequestArgs";
import { UpdateInvestorOrderRequestArgs } from "./UpdateInvestorOrderRequestArgs";
import { DeleteInvestorOrderRequestArgs } from "./DeleteInvestorOrderRequestArgs";
import { InvestorOrderRequestFindManyArgs } from "./InvestorOrderRequestFindManyArgs";
import { InvestorOrderRequestFindUniqueArgs } from "./InvestorOrderRequestFindUniqueArgs";
import { InvestorOrderRequest } from "./InvestorOrderRequest";
import { InvestorOrderRequestService } from "../investorOrderRequest.service";

@graphql.Resolver(() => InvestorOrderRequest)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class InvestorOrderRequestResolverBase {
  constructor(
    protected readonly service: InvestorOrderRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InvestorOrderRequest",
    action: "read",
    possession: "any",
  })
  async _investorOrderRequestsMeta(
    @graphql.Args() args: InvestorOrderRequestFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InvestorOrderRequest])
  @nestAccessControl.UseRoles({
    resource: "InvestorOrderRequest",
    action: "read",
    possession: "any",
  })
  async investorOrderRequests(
    @graphql.Args() args: InvestorOrderRequestFindManyArgs
  ): Promise<InvestorOrderRequest[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InvestorOrderRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InvestorOrderRequest",
    action: "read",
    possession: "own",
  })
  async investorOrderRequest(
    @graphql.Args() args: InvestorOrderRequestFindUniqueArgs
  ): Promise<InvestorOrderRequest | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InvestorOrderRequest)
  @nestAccessControl.UseRoles({
    resource: "InvestorOrderRequest",
    action: "create",
    possession: "any",
  })
  async createInvestorOrderRequest(
    @graphql.Args() args: CreateInvestorOrderRequestArgs
  ): Promise<InvestorOrderRequest> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InvestorOrderRequest)
  @nestAccessControl.UseRoles({
    resource: "InvestorOrderRequest",
    action: "update",
    possession: "any",
  })
  async updateInvestorOrderRequest(
    @graphql.Args() args: UpdateInvestorOrderRequestArgs
  ): Promise<InvestorOrderRequest | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InvestorOrderRequest)
  @nestAccessControl.UseRoles({
    resource: "InvestorOrderRequest",
    action: "delete",
    possession: "any",
  })
  async deleteInvestorOrderRequest(
    @graphql.Args() args: DeleteInvestorOrderRequestArgs
  ): Promise<InvestorOrderRequest | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
